name: Testkube on vCluster with ArgoCD
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main 

jobs:
  run-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
     
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install CLI tools
        run: |
          # Install vCluster CLI
          curl -sSL https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-linux-amd64 -o vcluster
          chmod +x vcluster
          sudo mv vcluster /usr/local/bin
          
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Verify existing installations
        run: |
          echo "=== Checking ArgoCD ==="
          kubectl get pods -n argocd
          
          echo "=== Checking Testkube ==="
          kubectl get pods -n testkube || echo "Testkube namespace not found"

      - name: Create vCluster
        run: |
          PR_NUMBER=${{ github.event.number || github.run_id }}
          echo "Running for PR #$PR_NUMBER"
          vcluster create testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER --connect=false
          
          # Wait for vCluster to be ready
          echo "Waiting for vCluster to be ready..."
          kubectl wait --for=condition=ready pod -l app=vcluster --timeout=300s -n demo-$PR_NUMBER

      - name: Connect to vCluster and deploy app via ArgoCD
        run: |
          PR_NUMBER=${{ github.event.number || github.run_id }}
          
          # Deploy app directly to vCluster without ArgoCD cluster registration
          echo "=== Connecting to vCluster ==="
          vcluster connect testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER
          
          # Verify vCluster connection
          echo "=== vCluster Status ==="
          kubectl get nodes
          
          # Deploy nginx directly to vCluster
          echo "=== Deploying nginx to vCluster ==="
          kubectl apply -f - <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: nginx-deployment
            namespace: default
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: nginx
            template:
              metadata:
                labels:
                  app: nginx
              spec:
                containers:
                - name: nginx
                  image: nginx:latest
                  ports:
                  - containerPort: 80
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: nginx-service
            namespace: default
          spec:
            selector:
              app: nginx
            ports:
            - port: 80
              targetPort: 80
            type: ClusterIP
          EOF
          
          # Wait for deployment
          kubectl wait --for=condition=available --timeout=300s deployment/nginx-deployment
          
          # Verify deployment
          echo "=== Verifying deployment ==="
          kubectl get all

      - name: Setup Testkube
        uses: kubeshop/setup-testkube@v1
        with:
          organization: ${{ secrets.TESTKUBE_ORG_ID }}
          environment: ${{ secrets.TESTKUBE_ENV_ID }}
          token: ${{ secrets.TESTKUBE_API_TOKEN }}

      - name: Provision ephemeral runner and run test
        run: |
          # Provision ephemeral runner
          testkube install runner github-action-runner-${{ github.run_id }} --create --env ${{ secrets.TESTKUBE_ENV_ID }} --namespace testkube --floating
          
          # Run the test
          testkube run testworkflow curl-nginx-app \
           -f \
           --config url=http://nginx-service.default.svc.cluster.local \
           --target name=github-action-runner-${{ github.run_id }} \
           --tag pull-request=PR-${{ github.run_id }}

      - name: Cleanup resources
        if: always()
        run: |
          PR_NUMBER=${{ github.event.number || github.run_id }}
          
          # Kill any port-forward processes
          kill $VCLUSTER_PID $VCLUSTER_PORT_FORWARD_PID $ARGOCD_PORT_FORWARD_PID 2>/dev/null || true
          pkill -f "kubectl port-forward" || true
          pkill -f "vcluster connect" || true
          
          # Delete ArgoCD application
          kubectl delete application nginx-app-pr-$PR_NUMBER -n argocd --ignore-not-found=true
          
          # Remove cluster from ArgoCD
          argocd cluster rm vcluster-pr-$PR_NUMBER --yes || true
          
          # Delete Testkube runner
          testkube delete runner github-action-runner-${{ github.run_id }} --delete --uninstall || true
          
          # Disconnect and delete vCluster
          vcluster disconnect || true
          kubectl delete ns demo-$PR_NUMBER --ignore-not-found=true
