name: Testkube on vCluster with ArgoCD
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main 

env:
  PR_NUMBER: ${{ github.event.number || github.run_id }}

jobs:
  run-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
     
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install CLI tools
        run: |
          # Install vCluster CLI
          curl -sSL https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-linux-amd64 -o vcluster
          chmod +x vcluster
          sudo mv vcluster /usr/local/bin
          
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Verify existing installations
        run: |
          echo "=== Host Cluster Info ==="
          kubectl cluster-info
          kubectl get nodes
          
          echo "=== Available Namespaces ==="
          kubectl get namespaces
          
          echo "=== Checking ArgoCD ==="
          kubectl get pods -n argocd || echo "ArgoCD namespace not found"
          
          echo "=== Checking Testkube ==="
          kubectl get pods -n testkube || echo "Testkube namespace not found"

      - name: Pre-flight Cleanup
        id: preflight-cleanup
        run: |
          echo "=== Pre-flight Cleanup for Ephemeral Demo ==="
          
          # Clean up any potential leftovers from previous demo runs
          echo "Cleaning up any leftover demo resources..."
          
          # Delete any existing demo namespaces
          kubectl get namespaces | grep "demo-" | awk '{print $1}' | xargs -r kubectl delete namespace --ignore-not-found=true || true
          
          # Delete any leftover ArgoCD applications
          kubectl get applications -n argocd 2>/dev/null | grep "nginx-vcluster-pr-" | awk '{print $1}' | xargs -r kubectl delete application -n argocd --ignore-not-found=true || true
          
          # Clean up any leftover vClusters
          vcluster list | grep "testkube-vcluster-" | awk '{print $1, $2}' | while read name namespace; do
            echo "Cleaning up leftover vCluster: $name in $namespace"
            vcluster delete "$name" --namespace "$namespace" || true
          done
          
          echo "=== Pre-flight cleanup completed - Ready for ephemeral demo ==="

      - name: Install or Verify ArgoCD
        id: install-argocd
        run: |
          echo "=== Checking ArgoCD Installation ==="
          
          # Check if ArgoCD namespace exists and has running pods
          if kubectl get namespace argocd >/dev/null 2>&1; then
            echo "ArgoCD namespace exists, checking pods..."
            ARGOCD_PODS=$(kubectl get pods -n argocd --no-headers 2>/dev/null | wc -l)
            if [ "$ARGOCD_PODS" -gt 0 ]; then
              echo "ArgoCD pods found, checking if they're ready..."
              kubectl get pods -n argocd
              # Wait for existing ArgoCD to be ready
              kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd || echo "ArgoCD server not ready yet"
            else
              echo "ArgoCD namespace exists but no pods found, installing..."
              kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
              kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
            fi
          else
            echo "ArgoCD not found, installing..."
            kubectl create namespace argocd
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
          fi
          
          echo "=== ArgoCD Status ==="
          kubectl get pods -n argocd
          kubectl get svc -n argocd

      # ==================== vCluster Module ====================
      - name: Create vCluster
        id: create-vcluster
        run: |
          echo "=== Creating vCluster for PR $PR_NUMBER ==="
          
          # Create namespace
          kubectl create namespace demo-$PR_NUMBER --dry-run=client -o yaml | kubectl apply -f -
          
          # Create vCluster with proper configuration for ArgoCD access
          vcluster create testkube-vcluster-$PR_NUMBER \
            --namespace demo-$PR_NUMBER \
            --connect=false \
            --expose
          
          # Wait for vCluster to be ready
          echo "Waiting for vCluster to be ready..."
          kubectl wait --for=condition=ready pod -l app=vcluster --timeout=300s -n demo-$PR_NUMBER
          
          echo "=== vCluster created successfully ==="
          kubectl get all -n demo-$PR_NUMBER
          
          # Get vCluster service details for ArgoCD connection
          echo "=== vCluster Service Details ==="
          kubectl get svc -n demo-$PR_NUMBER

      - name: Setup vCluster connectivity and ArgoCD access
        id: setup-vcluster
        run: |
          echo "=== Setting up vCluster connectivity for ArgoCD ==="
          
          # Save the current (host) context
          HOST_CONTEXT=$(kubectl config current-context)
          echo "HOST_CONTEXT=$HOST_CONTEXT" >> $GITHUB_ENV
          echo "Host cluster context: $HOST_CONTEXT"
          
          # Connect to vCluster to set it up
          echo "=== Connecting to vCluster ==="
          vcluster connect testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER &
          VCLUSTER_PID=$!
          echo "VCLUSTER_PID=$VCLUSTER_PID" >> $GITHUB_ENV
          
          # Wait for connection to establish
          sleep 30
          
          echo "=== Verifying vCluster connection ==="
          kubectl get nodes
          kubectl get namespaces
          
          # Create default namespace if it doesn't exist in vCluster
          kubectl create namespace default
          
          # Create service account for ArgoCD in vCluster
          kubectl create serviceaccount argocd-manager -n kube-system
          
          # Create cluster role binding for ArgoCD
          kubectl create clusterrolebinding argocd-manager-binding \
            --clusterrole=cluster-admin \
            --serviceaccount=kube-system:argocd-manager
          
          # Wait for service account with better verification
          echo "Waiting for service account to be fully ready..."
          RETRY_COUNT=0
          MAX_RETRIES=30
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            # Check if service account exists and has been populated
            if kubectl get serviceaccount argocd-manager -n kube-system >/dev/null 2>&1; then
              echo "Service account found, checking if it's ready..."
              
              # Check if service account has secrets (for token creation)
              SA_READY=$(kubectl get serviceaccount argocd-manager -n kube-system -o jsonpath='{.metadata.name}' 2>/dev/null || echo "")
              if [ -n "$SA_READY" ]; then
                echo "✅ Service account is ready"
                break
              fi
            fi
            
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "Waiting for service account to be ready... ($RETRY_COUNT/$MAX_RETRIES)"
            sleep 5
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "❌ Service account failed to become ready"
            echo "=== Debugging Information ==="
            kubectl get namespaces
            kubectl get serviceaccounts -A
            kubectl get clusterrolebindings | grep argocd || echo "No ArgoCD clusterrolebindings found"
            exit 1
          fi
          
          # Create a longer-lived token (24 hours)
          echo "Creating service account token..."
          kubectl create token argocd-manager -n kube-system --duration=24h > /tmp/sa-token
          SA_TOKEN=$(cat /tmp/sa-token)
          
          # Get vCluster kubeconfig for testing
          kubectl config view --raw > /tmp/vcluster-config.yaml
          
          # Switch back to host context
          kubectl config use-context $HOST_CONTEXT
          
          # Get vCluster service endpoint
          VCLUSTER_SERVER="https://$(kubectl get svc testkube-vcluster-$PR_NUMBER -n demo-$PR_NUMBER -o jsonpath='{.status.loadBalancer.ingress[0].ip}'):443"
          
          echo "VCLUSTER_SERVER=$VCLUSTER_SERVER" >> $GITHUB_ENV
          echo "SA_TOKEN=$SA_TOKEN" >> $GITHUB_ENV
          
          # Test the connection before proceeding
          echo "=== Testing vCluster authentication ==="
          curl -k -H "Authorization: Bearer $SA_TOKEN" "$VCLUSTER_SERVER/api/v1/namespaces" || echo "Direct API test failed - this might be expected"
          
          echo "=== vCluster connectivity prepared for ArgoCD ==="

      - name: Configure ArgoCD to Deploy to vCluster
        id: setup-argocd-vcluster
        run: |
          echo "=== Configuring ArgoCD to Deploy Directly to vCluster ==="
          
          # Get ArgoCD credentials
          ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          ARGOCD_SERVER=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          
          if [ -z "$ARGOCD_SERVER" ]; then
            echo "Setting up ArgoCD port-forward..."
            kubectl port-forward svc/argocd-server -n argocd 8080:443 &
            ARGOCD_PORT_FORWARD_PID=$!
            echo "ARGOCD_PORT_FORWARD_PID=$ARGOCD_PORT_FORWARD_PID" >> $GITHUB_ENV
            sleep 15
            ARGOCD_SERVER="localhost:8080"
          fi
          
          echo "ARGOCD_SERVER=$ARGOCD_SERVER" >> $GITHUB_ENV
          echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> $GITHUB_ENV
          
          # Login to ArgoCD
          argocd login "$ARGOCD_SERVER" --username admin --password "$ARGOCD_PASSWORD" --insecure
          
          # Add vCluster as a cluster in ArgoCD
          echo "=== Adding vCluster to ArgoCD ==="
          
          cat > vcluster-secret.yaml << 'EOF'
          apiVersion: v1
          kind: Secret
          metadata:
            name: vcluster-pr-$PR_NUMBER
            namespace: argocd
            labels:
              argocd.argoproj.io/secret-type: cluster
              ephemeral: "true"
              pr: "$PR_NUMBER"
          type: Opaque
          stringData:
            name: "vcluster-pr-$PR_NUMBER"
            server: "$VCLUSTER_SERVER"
            config: |
              {
                "bearerToken": "$SA_TOKEN",
                "tlsClientConfig": {
                  "insecure": true,
                  "serverName": ""
                },
                "timeout": "30s"
              }
          EOF
          
          # Replace variables in the file
          sed -i "s/\$PR_NUMBER/$PR_NUMBER/g" vcluster-secret.yaml
          sed -i "s|\$VCLUSTER_SERVER|$VCLUSTER_SERVER|g" vcluster-secret.yaml
          sed -i "s/\$SA_TOKEN/$SA_TOKEN/g" vcluster-secret.yaml
          
          kubectl apply -f vcluster-secret.yaml
          
          # Wait for ArgoCD to pick up the cluster
          echo "=== Waiting for ArgoCD to recognize the cluster ==="
          sleep 30
          
          # Verify cluster registration
          echo "=== Verifying ArgoCD cluster registration ==="
          argocd cluster list
          
          # Create ArgoCD application
          cat > argocd-vcluster-app-pr-$PR_NUMBER.yaml << 'EOF'
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: nginx-vcluster-pr-$PR_NUMBER
            namespace: argocd
            labels:
              ephemeral: "true"
              pr: "$PR_NUMBER" 
              target: "vcluster"
          spec:
            project: default
            source:
              repoURL: $GITHUB_REPO
              targetRevision: $GITHUB_BRANCH
              path: k8s
            destination:
              server: "$VCLUSTER_SERVER"
              namespace: default
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
              - CreateNamespace=true
              retry:
                limit: 5
                backoff:
                  duration: 5s
                  factor: 2
                  maxDuration: 3m
          EOF
          
          # Replace variables
          sed -i "s/\$PR_NUMBER/$PR_NUMBER/g" argocd-vcluster-app-pr-$PR_NUMBER.yaml
          sed -i "s|\$VCLUSTER_SERVER|$VCLUSTER_SERVER|g" argocd-vcluster-app-pr-$PR_NUMBER.yaml
          sed -i "s|\$GITHUB_REPO|${{ github.server_url }}/${{ github.repository }}|g" argocd-vcluster-app-pr-$PR_NUMBER.yaml
          sed -i "s/\$GITHUB_BRANCH/${{ github.head_ref || github.ref_name }}/g" argocd-vcluster-app-pr-$PR_NUMBER.yaml
          
          kubectl apply -f argocd-vcluster-app-pr-$PR_NUMBER.yaml
          
          # Wait for application to be ready
          echo "=== Waiting for ArgoCD Application to be Ready ==="
          for i in {1..30}; do
            if argocd app get nginx-vcluster-pr-$PR_NUMBER >/dev/null 2>&1; then
              echo "✅ ArgoCD application is ready"
              break
            fi
            echo "Waiting for application to be ready... ($i/30)"
            sleep 5
          done
          
          # Sync and check status
          echo "=== Syncing ArgoCD application ==="
          sleep 10
          argocd app sync nginx-vcluster-pr-$PR_NUMBER --timeout 300
          
          echo "=== Final ArgoCD Application Status ==="
          argocd app get nginx-vcluster-pr-$PR_NUMBER
          
          echo "=== ArgoCD to vCluster configuration completed successfully! ==="
       
      # ==================== Testkube Module ====================
      - name: Setup Testkube
        uses: kubeshop/setup-testkube@v1
        with:
          organization: ${{ secrets.TESTKUBE_ORG_ID }}
          environment: ${{ secrets.TESTKUBE_ENV_ID }}
          token: ${{ secrets.TESTKUBE_API_TOKEN }}

      - name: Provision ephemeral runner in vCluster
        run: |
          echo "=== Provisioning Testkube runner in vCluster ==="
          
          # Ensure we're connected to vCluster
          if ! kubectl get nodes >/dev/null 2>&1; then
            echo "Reconnecting to vCluster..."
            kill $VCLUSTER_PID 2>/dev/null || true
            vcluster connect testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER &
            VCLUSTER_PID=$!
            echo "VCLUSTER_PID=$VCLUSTER_PID" >> $GITHUB_ENV
            sleep 30
          fi
          
          # Provision ephemeral runner in vCluster
          testkube install runner github-action-runner-${{ github.run_id }} \
            --create \
            --env testkube-demo \
            --namespace testkube \
            --floating

          # Wait a bit for runner to register
          sleep 30

          # Check runner status
          echo "=== Checking runner status ==="
          testkube get runners
          
          # Extract runner name ONLY from current cluster section
          ACTUAL_RUNNER_NAME=$(testkube get runners | grep "•:testkube" | awk '{print $3}' | head -1)
          
          if [ -z "$ACTUAL_RUNNER_NAME" ]; then
            echo "Failed to find runner in current cluster, trying more specific search..."
            # Fallback: search in the "Recognized agents" section specifically
            ACTUAL_RUNNER_NAME=$(testkube get runners | grep -A 20 "Recognized agents in current cluster" | grep "github-action-runner" | awk '{print $3}' | head -1)
          fi
          
          echo "Extracted runner name: $ACTUAL_RUNNER_NAME"
          echo "ACTUAL_RUNNER_NAME=$ACTUAL_RUNNER_NAME" >> $GITHUB_ENV
          
          # Verify it's not empty
          if [ -z "$ACTUAL_RUNNER_NAME" ]; then
            echo "❌ Failed to get runner name"
            echo "Debug - Available runners:"
            testkube get runners
            exit 1
          fi
          
          # Wait for runner pod to be ready
          echo "Waiting for runner pod to be ready..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=testkube-runner --timeout=300s -n testkube
          
          echo "=== Testkube runner provisioned in vCluster ==="

      - name: Run Tests with Testkube in vCluster
        id: run-tests
        run: |
        
          echo "=== Running Tests in vCluster with Testkube ==="
          echo "=== Running test with target runner: $ACTUAL_RUNNER_NAME ==="

          vcluster connect testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER &
          sleep 30

          # Install agent with cloud connection
          helm repo add testkube https://kubeshop.github.io/helm-charts
          helm repo update
          
          helm install testkube testkube/testkube \
            --namespace testkube \
            --create-namespace \
            --set testkube-api.cloud.key="$TESTKUBE_TOKEN" \
            --set testkube-api.cloud.orgId="$TESTKUBE_ORG_ID" \
            --set testkube-api.cloud.envId="$TESTKUBE_ENV_ID" \
            --set testkube-api.cloud.url="$TESTKUBE_CLOUD_URL" \
            --set mongodb.enabled=false \
            --set testkube-dashboard.enabled=false \
            --set minio.enabled=false
          
          # Wait for agent to be ready
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=testkube-api-server --timeout=300s -n testkube
          
          # Switch back to host context for test execution
          kubectl config use-context $HOST_CONTEXT
          
          # Run test using the agent directly
          testkube run testworkflow curl-nginx-app \
            --variable host="nginx-service.default.svc.cluster.local" \
            --variable port="80" \
            --context testkube \
            --namespace testkube \
            --timeout 900s \
            --follow
          
          echo "=== Test Results ==="
          echo "✅ ArgoCD deployment to vCluster verified via Testkube"
          echo "✅ Ephemeral testing environment validated"

      # ==================== Cleanup Module ====================
      - name: Cleanup Testkube Runner
        if: always()
        run: |
          echo "=== Cleaning up Testkube runner ==="
          testkube delete runner github-action-runner-${{ github.run_id }} --delete --uninstall || true
          echo "=== Testkube runner cleanup completed ==="

      - name: Cleanup ArgoCD Application
        if: always()
        run: |
          echo "=== Cleaning up ArgoCD Application ==="
          
          # Switch to host context for ArgoCD operations
          kubectl config use-context $HOST_CONTEXT || true
          
          # Login to ArgoCD
          argocd login "$ARGOCD_SERVER" --username admin --password "$ARGOCD_PASSWORD" --insecure || true
          
          # Delete ArgoCD application
          kubectl delete application nginx-vcluster-pr-$PR_NUMBER -n argocd --ignore-not-found=true
          
          # Remove cluster secret from ArgoCD
          kubectl delete secret vcluster-pr-$PR_NUMBER -n argocd --ignore-not-found=true
          
          echo "=== ArgoCD cleanup completed ==="

      - name: Cleanup vCluster
        if: always()
        run: |
          echo "=== Cleaning up vCluster ==="
          
          # Kill port-forward processes
          kill $VCLUSTER_PID $ARGOCD_PORT_FORWARD_PID 2>/dev/null || true
          pkill -f "kubectl port-forward" || true
          pkill -f "vcluster connect" || true
          
          # Switch back to host context
          kubectl config use-context $HOST_CONTEXT || true
          
          # Disconnect vCluster
          vcluster disconnect || true
          
          # Delete vCluster and namespace
          vcluster delete testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER || true
          kubectl delete namespace demo-$PR_NUMBER --ignore-not-found=true
          
          echo "=== vCluster cleanup completed ==="
