name: Ephemeral Environment Demo with vCluster and Testkube

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  PR_NUMBER: ${{ github.event.number || github.run_id }}

jobs:
  ephemeral-environment-demo:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GCP_PROJECT_ID

      - name: Install vCluster CLI
        run: |
          curl -L -o vcluster "https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-linux-amd64"
          sudo install -c -m 0755 vcluster /usr/local/bin
          vcluster --version

      - name: Verify Host Cluster Access
        id: verify-host
        run: |
          echo "=== Verifying Host Cluster Access ==="
          HOST_CONTEXT=$(kubectl config current-context)
          echo "HOST_CONTEXT=$HOST_CONTEXT" >> $GITHUB_ENV
          echo "Current context: $HOST_CONTEXT"
          kubectl get nodes
          kubectl get namespaces

      - name: Pre-flight Cleanup
        id: preflight-cleanup
        run: |
          echo "=== Pre-flight Cleanup for Ephemeral Demo ==="
          
          # Clean up any potential leftovers from previous demo runs
          echo "Cleaning up any leftover demo resources..."
          
          # Delete any existing demo namespaces
          kubectl get namespaces | grep "demo-" | awk '{print $1}' | xargs -r kubectl delete namespace --ignore-not-found=true || true
          
          # Clean up any leftover vClusters
          vcluster list | grep "testkube-vcluster-" | awk '{print $1, $2}' | while read name namespace; do
            echo "Cleaning up leftover vCluster: $name in $namespace"
            vcluster delete "$name" --namespace "$namespace" || true
          done
          
          echo "=== Pre-flight cleanup completed - Ready for ephemeral demo ==="

      - name: Create Ephemeral vCluster
        id: create-vcluster
        run: |
          echo "=== Creating Ephemeral vCluster Environment ==="
          
          # Create namespace for this PR's ephemeral environment
          NAMESPACE="demo-$PR_NUMBER"
          VCLUSTER_NAME="testkube-vcluster-$PR_NUMBER"
          
          echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
          echo "VCLUSTER_NAME=$VCLUSTER_NAME" >> $GITHUB_ENV
          
          kubectl create namespace $NAMESPACE || echo "Namespace already exists"
          
          # Create vCluster with minimal resource requirements
          vcluster create $VCLUSTER_NAME --namespace $NAMESPACE \
            --set syncer.extraArgs[0]="--tls-san=testkube-$PR_NUMBER.local" \
            --set vcluster.image=rancher/k3s:v1.28.8-k3s1 \
            --set syncer.resources.requests.memory=100Mi \
            --set syncer.resources.requests.cpu=100m \
            --set vcluster.resources.requests.memory=200Mi \
            --set vcluster.resources.requests.cpu=200m
          
          echo "=== vCluster created successfully ==="
          
          # Connect to vCluster and save kubeconfig
          vcluster connect $VCLUSTER_NAME --namespace $NAMESPACE --kube-config vcluster-kubeconfig.yaml &
          VCLUSTER_PID=$!
          echo "VCLUSTER_PID=$VCLUSTER_PID" >> $GITHUB_ENV
          
          # Wait for connection to be ready
          sleep 15
          
          # Verify vCluster connection
          export KUBECONFIG=vcluster-kubeconfig.yaml
          kubectl get nodes
          kubectl get namespaces
          
          echo "=== Ephemeral vCluster is ready for testing ==="

      - name: Deploy Application to vCluster
        id: deploy-app
        run: |
          echo "=== Deploying Application to Ephemeral vCluster ==="
          
          # Use vCluster kubeconfig
          export KUBECONFIG=vcluster-kubeconfig.yaml
          
          echo "Current context: $(kubectl config current-context)"
          echo "Deploying application to ephemeral vCluster environment..."
          
          # Deploy directly to vCluster
          kubectl apply -f k8s/
          
          # Wait for deployment to be ready
          kubectl wait --for=condition=available --timeout=300s deployment/nginx-deployment -n default
          
          echo "=== Deployment Status in vCluster ==="
          kubectl get all -n default
          
          # Quick connectivity test
          kubectl run connectivity-test-$PR_NUMBER --image=curlimages/curl:latest --rm -i --restart=Never -- \
            curl -s http://nginx-service.default.svc.cluster.local | head -10 || echo "‚úÖ Service is accessible"
          
          echo "=== App successfully deployed to ephemeral vCluster environment ==="

      - name: Setup Testkube in vCluster
        id: setup-testkube
        run: |
          echo "=== Setting up Testkube in vCluster ==="
          
          # Use vCluster kubeconfig
          export KUBECONFIG=vcluster-kubeconfig.yaml
          
          # Install Testkube CLI
          curl -sSLf https://get.testkube.io | sh
          sudo mv bin/kubectl-testkube /usr/local/bin/testkube
          
          # Install Testkube in vCluster
          testkube init --no-confirm
          
          # Wait for Testkube to be ready
          echo "Waiting for Testkube to be ready..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=testkube-api-server -n testkube --timeout=300s
          
          echo "=== Testkube ready in vCluster ==="
          testkube version
          testkube status

      - name: Run Tests with Testkube
        id: run-tests
        run: |
          echo "=== Running Tests in vCluster with Testkube ==="
          
          # Use vCluster kubeconfig
          export KUBECONFIG=vcluster-kubeconfig.yaml
          
          # Create a comprehensive test for our nginx app
          cat > nginx-test.yaml << EOF
          apiVersion: tests.testkube.io/v3
          kind: Test
          metadata:
            name: nginx-e2e-test-pr-$PR_NUMBER
            namespace: testkube
          spec:
            type: curl/test
            content:
              type: string
              data: |
                #!/bin/bash
                set -e
                
                echo "=== Running E2E Tests for Nginx App ==="
                
                # Test 1: Service connectivity
                echo "Test 1: Testing service connectivity..."
                response=\$(curl -s -w "%{http_code}" http://nginx-service.default.svc.cluster.local)
                if [[ "\$response" == *"200" ]]; then
                  echo "‚úÖ Service connectivity test passed"
                else
                  echo "‚ùå Service connectivity test failed"
                  exit 1
                fi
                
                # Test 2: Response content
                echo "Test 2: Testing response content..."
                content=\$(curl -s http://nginx-service.default.svc.cluster.local)
                if [[ "\$content" == *"Welcome to nginx"* ]]; then
                  echo "‚úÖ Response content test passed"
                else
                  echo "‚ùå Response content test failed"
                  exit 1
                fi
                
                # Test 3: Service availability
                echo "Test 3: Testing service availability..."
                for i in {1..5}; do
                  curl -f http://nginx-service.default.svc.cluster.local > /dev/null
                  if [ \$? -eq 0 ]; then
                    echo "‚úÖ Request \$i succeeded"
                  else
                    echo "‚ùå Request \$i failed"
                    exit 1
                  fi
                  sleep 1
                done
                
                echo "=== All E2E tests passed successfully! ==="
          EOF
          
          # Apply the test
          kubectl apply -f nginx-test.yaml
          
          # Run the test and wait for completion
          echo "=== Running E2E test ==="
          testkube run test nginx-e2e-test-pr-$PR_NUMBER --watch --verbose
          
          echo "=== Test Results ==="
          testkube get execution --test nginx-e2e-test-pr-$PR_NUMBER --limit 1

      - name: Test Summary
        id: test-summary
        if: always()
        run: |
          echo "=== Ephemeral Environment Demo Summary ==="
          echo "‚úÖ Created ephemeral vCluster: $VCLUSTER_NAME"
          echo "‚úÖ Deployed application to isolated environment"
          echo "‚úÖ Ran comprehensive E2E tests with Testkube"
          echo "üéØ Demonstrated true ephemeral testing environment"
          echo ""
          echo "Benefits demonstrated:"
          echo "- Complete isolation (own Kubernetes cluster)"
          echo "- No conflicts with other environments"
          echo "- Full testing capabilities with Testkube"
          echo "- Automatic cleanup after testing"

      - name: Cleanup vCluster
        if: always()
        run: |
          echo "=== Cleaning up Ephemeral vCluster ==="
          
          # Kill vCluster connection process
          if [ ! -z "$VCLUSTER_PID" ]; then
            kill $VCLUSTER_PID || true
          fi
          
          # Delete vCluster
          vcluster delete $VCLUSTER_NAME --namespace $NAMESPACE || true
          
          # Delete namespace
          kubectl delete namespace $NAMESPACE --ignore-not-found=true || true
          
          echo "=== Ephemeral environment cleanup completed ==="

      - name: Final Status Check
        if: always()
        run: |
          echo "=== Final Status Check ==="
          echo "Verifying cleanup..."
          
          # Check if vCluster is gone
          vcluster list | grep "$VCLUSTER_NAME" || echo "‚úÖ vCluster successfully cleaned up"
          
          # Check if namespace is gone
          kubectl get namespace $NAMESPACE 2>/dev/null || echo "‚úÖ Namespace successfully cleaned up"
          
          echo "=== Ephemeral Environment Demo Completed ==="
