name: Testkube on vCluster with ArgoCD
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main 

env:
  PR_NUMBER: ${{ github.event.number || github.run_id }}

jobs:
  run-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
     
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install CLI tools
        run: |
          # Install vCluster CLI
          curl -sSL https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-linux-amd64 -o vcluster
          chmod +x vcluster
          sudo mv vcluster /usr/local/bin
          
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Verify existing installations
        run: |
          echo "=== Host Cluster Info ==="
          kubectl cluster-info
          kubectl get nodes
          
          echo "=== Available Namespaces ==="
          kubectl get namespaces
          
          echo "=== Checking ArgoCD ==="
          kubectl get pods -n argocd || echo "ArgoCD namespace not found"
          
          echo "=== Checking Testkube ==="
          kubectl get pods -n testkube || echo "Testkube namespace not found"

      - name: Pre-flight Cleanup
        id: preflight-cleanup
        run: |
          echo "=== Pre-flight Cleanup for Ephemeral Demo ==="
          
          # Clean up any potential leftovers from previous demo runs
          echo "Cleaning up any leftover demo resources..."
          
          # Delete any existing demo namespaces
          kubectl get namespaces | grep "demo-" | awk '{print $1}' | xargs -r kubectl delete namespace --ignore-not-found=true || true
          
          # Delete any leftover ArgoCD applications
          kubectl get applications -n argocd 2>/dev/null | grep "nginx-vcluster-pr-" | awk '{print $1}' | xargs -r kubectl delete application -n argocd --ignore-not-found=true || true
          
          # Clean up any leftover vClusters
          vcluster list | grep "testkube-vcluster-" | awk '{print $1, $2}' | while read name namespace; do
            echo "Cleaning up leftover vCluster: $name in $namespace"
            vcluster delete "$name" --namespace "$namespace" || true
          done
          
          echo "=== Pre-flight cleanup completed - Ready for ephemeral demo ==="

      - name: Install or Verify ArgoCD
        id: install-argocd
        run: |
          echo "=== Checking ArgoCD Installation ==="
          
          # Check if ArgoCD namespace exists and has running pods
          if kubectl get namespace argocd >/dev/null 2>&1; then
            echo "ArgoCD namespace exists, checking pods..."
            ARGOCD_PODS=$(kubectl get pods -n argocd --no-headers 2>/dev/null | wc -l)
            if [ "$ARGOCD_PODS" -gt 0 ]; then
              echo "ArgoCD pods found, checking if they're ready..."
              kubectl get pods -n argocd
              # Wait for existing ArgoCD to be ready
              kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd || echo "ArgoCD server not ready yet"
            else
              echo "ArgoCD namespace exists but no pods found, installing..."
              kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
              kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
            fi
          else
            echo "ArgoCD not found, installing..."
            kubectl create namespace argocd
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
          fi
          
          echo "=== ArgoCD Status ==="
          kubectl get pods -n argocd
          kubectl get svc -n argocd

      # ==================== vCluster Module ====================
      - name: Create vCluster
        id: create-vcluster
        run: |
          echo "=== Creating vCluster for PR $PR_NUMBER ==="
          
          # Create namespace
          kubectl create namespace demo-$PR_NUMBER --dry-run=client -o yaml | kubectl apply -f -
          
          # Create vCluster (simple approach)
          vcluster create testkube-vcluster-$PR_NUMBER \
            --namespace demo-$PR_NUMBER \
            --connect=false
          
          # Wait for vCluster to be ready
          echo "Waiting for vCluster to be ready..."
          kubectl wait --for=condition=ready pod -l app=vcluster --timeout=300s -n demo-$PR_NUMBER
          
          echo "=== vCluster created successfully ==="
          kubectl get all -n demo-$PR_NUMBER

      - name: Setup vCluster connectivity
        id: setup-vcluster
        run: |
          echo "=== Setting up vCluster connectivity ==="
          
          # Save the current (host) context before connecting to vCluster
          HOST_CONTEXT=$(kubectl config current-context)
          echo "HOST_CONTEXT=$HOST_CONTEXT" >> $GITHUB_ENV
          echo "Host cluster context: $HOST_CONTEXT"
          
          # Create kubeconfig for ArgoCD to use
          vcluster connect testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER --print > vcluster-kubeconfig.yaml
          
          # Also connect to vCluster for direct access
          vcluster connect testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER &
          VCLUSTER_PID=$!
          echo "VCLUSTER_PID=$VCLUSTER_PID" >> $GITHUB_ENV
          
          # Wait for connection to establish
          sleep 30
          
          echo "=== Verifying vCluster connection ==="
          kubectl get nodes
          kubectl get namespaces
          
          # Create default namespace if it doesn't exist in vCluster
          kubectl create namespace default --dry-run=client -o yaml | kubectl apply -f -
          
          echo "=== vCluster connectivity established ==="

      # ==================== ArgoCD GitOps to vCluster ====================
      - name: Configure ArgoCD to Deploy to vCluster
        id: setup-argocd-vcluster
        run: |
          echo "=== Configuring ArgoCD to Deploy Directly to vCluster ==="
          
          # Switch to host context
          kubectl config use-context $HOST_CONTEXT
          
          # Get ArgoCD credentials
          ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          ARGOCD_SERVER=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          
          if [ -z "$ARGOCD_SERVER" ]; then
            echo "Setting up ArgoCD port-forward..."
            kubectl port-forward svc/argocd-server -n argocd 8080:443 &
            ARGOCD_PORT_FORWARD_PID=$!
            echo "ARGOCD_PORT_FORWARD_PID=$ARGOCD_PORT_FORWARD_PID" >> $GITHUB_ENV
            sleep 15
            ARGOCD_SERVER="localhost:8080"
          fi
          
          echo "ARGOCD_SERVER=$ARGOCD_SERVER" >> $GITHUB_ENV
          echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> $GITHUB_ENV
          
          # Login to ArgoCD
          argocd login "$ARGOCD_SERVER" --username admin --password "$ARGOCD_PASSWORD" --insecure
          
          # Add vCluster as a cluster in ArgoCD
          echo "=== Adding vCluster to ArgoCD ==="
          VCLUSTER_CONTEXT_NAME=$(kubectl config get-contexts --kubeconfig=vcluster-kubeconfig.yaml --no-headers | awk '{print $2}' | head -1)
          echo "VCLUSTER_CONTEXT_NAME=$VCLUSTER_CONTEXT_NAME" >> $GITHUB_ENV
          
          # Register vCluster with ArgoCD
          argocd cluster add "$VCLUSTER_CONTEXT_NAME" \
            --kubeconfig vcluster-kubeconfig.yaml \
            --name "vcluster-pr-$PR_NUMBER" \
            --upsert || echo "Cluster registration completed"
          
          # Verify cluster registration
          echo "=== Verifying ArgoCD cluster registration ==="
          argocd cluster list
          
          # Create ArgoCD application that deploys directly to vCluster
          cat > argocd-vcluster-app-pr-$PR_NUMBER.yaml << EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: nginx-vcluster-pr-$PR_NUMBER
            namespace: argocd
            labels:
              ephemeral: "true"
              pr: "$PR_NUMBER" 
              target: "vcluster"
          spec:
            project: default
            source:
              repoURL: ${{ github.server_url }}/${{ github.repository }}
              targetRevision: ${{ github.head_ref || github.ref_name }}
              path: k8s
            destination:
              name: "vcluster-pr-$PR_NUMBER"
              namespace: default
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
              - CreateNamespace=true
          EOF
          
          kubectl apply -f argocd-vcluster-app-pr-$PR_NUMBER.yaml
          
          # Wait for application to be ready
          echo "=== Waiting for ArgoCD Application to be Ready ==="
          for i in {1..30}; do
            if argocd app get nginx-vcluster-pr-$PR_NUMBER >/dev/null 2>&1; then
              echo "✅ ArgoCD application is ready"
              break
            fi
            echo "Waiting for application to be ready... ($i/30)"
            sleep 2
          done
          
          # Wait for ArgoCD deployment to vCluster
          echo "=== Waiting for ArgoCD to deploy to vCluster ==="
          argocd app sync nginx-vcluster-pr-$PR_NUMBER
          argocd app wait nginx-vcluster-pr-$PR_NUMBER --health --timeout 300
          
          echo "=== ArgoCD Application Status ==="
          argocd app get nginx-vcluster-pr-$PR_NUMBER
          
          # Verify deployment in vCluster
          echo "=== Verifying deployment in vCluster ==="
          kubectl config use-context "$VCLUSTER_CONTEXT_NAME"
          kubectl get all -n default
          
          # Test the service
          kubectl run test-nginx-pr-$PR_NUMBER --image=curlimages/curl:latest --rm -i --restart=Never -- \
            curl -s http://nginx-service.default.svc.cluster.local || echo "✅ Service test completed"
          
          echo "=== ArgoCD deployment to vCluster completed successfully ==="

      # ==================== Testkube Module ====================
      - name: Setup Testkube in vCluster
        id: setup-testkube
        run: |
          echo "=== Setting up Testkube in vCluster ==="
          
          # Ensure we're in vCluster context
          kubectl config use-context "$VCLUSTER_CONTEXT_NAME"
          
          # Install Testkube CLI
          curl -sSLf https://get.testkube.io | sh
          sudo mv bin/kubectl-testkube /usr/local/bin/testkube
          
          # Install Testkube in vCluster
          testkube init --no-confirm
          
          # Wait for Testkube to be ready
          echo "Waiting for Testkube to be ready..."
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=testkube-api-server -n testkube --timeout=300s
          
          echo "=== Testkube ready in vCluster ==="
          testkube version
          testkube status

      - name: Run Tests with Testkube in vCluster
        id: run-tests
        run: |
          echo "=== Running Tests in vCluster with Testkube ==="
          
          # Create a comprehensive test for our nginx app
          cat > nginx-test.yaml << EOF
          apiVersion: tests.testkube.io/v3
          kind: Test
          metadata:
            name: nginx-e2e-test-pr-$PR_NUMBER
            namespace: testkube
          spec:
            type: curl/test
            content:
              type: string
              data: |
                #!/bin/bash
                set -e
                
                echo "=== Running E2E Tests for Nginx App Deployed via ArgoCD ==="
                
                # Test 1: Service connectivity
                echo "Test 1: Testing service connectivity..."
                response=\$(curl -s -w "%{http_code}" http://nginx-service.default.svc.cluster.local)
                if [[ "\$response" == *"200" ]]; then
                  echo "✅ Service connectivity test passed"
                else
                  echo "❌ Service connectivity test failed"
                  exit 1
                fi
                
                # Test 2: Response content
                echo "Test 2: Testing response content..."
                content=\$(curl -s http://nginx-service.default.svc.cluster.local)
                if [[ "\$content" == *"Welcome to nginx"* ]]; then
                  echo "✅ Response content test passed"
                else
                  echo "❌ Response content test failed"
                  exit 1
                fi
                
                # Test 3: Service availability
                echo "Test 3: Testing service availability..."
                for i in {1..5}; do
                  curl -f http://nginx-service.default.svc.cluster.local > /dev/null
                  if [ \$? -eq 0 ]; then
                    echo "✅ Request \$i succeeded"
                  else
                    echo "❌ Request \$i failed"
                    exit 1
                  fi
                  sleep 1
                done
                
                echo "=== All E2E tests passed successfully! ==="
                echo "✅ ArgoCD deployment to vCluster verified via Testkube"
          EOF
          
          # Apply the test
          kubectl apply -f nginx-test.yaml
          
          # Run the test and wait for completion
          echo "=== Running E2E test ==="
          testkube run test nginx-e2e-test-pr-$PR_NUMBER --watch --verbose
          
          echo "=== Test Results ==="
          testkube get execution --test nginx-e2e-test-pr-$PR_NUMBER --limit 1

      - name: Demo Summary
        id: demo-summary
        if: always()
        run: |
          echo "=== GitOpsCon Demo Summary ==="
          echo "✅ Created ephemeral vCluster: testkube-vcluster-$PR_NUMBER"
          echo "✅ Registered vCluster with ArgoCD"
          echo "✅ ArgoCD deployed application directly to vCluster"
          echo "✅ Ran comprehensive E2E tests with Testkube in vCluster"
          echo "🎯 Demonstrated complete GitOps workflow with ephemeral environments"
          echo ""
          echo "GitOps Flow Demonstrated:"
          echo "1. 🚀 Ephemeral vCluster created for PR"
          echo "2. 🔄 ArgoCD manages deployment to vCluster"
          echo "3. 🧪 Testkube runs tests in isolated environment"
          echo "4. 🧹 Automatic cleanup after testing"
          echo ""
          echo "Benefits shown:"
          echo "- Complete isolation (own Kubernetes cluster)"
          echo "- GitOps deployment to ephemeral environments"
          echo "- Full testing capabilities with Testkube"
          echo "- Zero conflicts with other environments"

      # ==================== Cleanup Module ====================
      - name: Cleanup ArgoCD Application
        if: always()
        run: |
          echo "=== Cleaning up ArgoCD Application ==="
          
          # Switch to host context for ArgoCD operations
          kubectl config use-context $HOST_CONTEXT || true
          
          # Login to ArgoCD
          argocd login "$ARGOCD_SERVER" --username admin --password "$ARGOCD_PASSWORD" --insecure || true
          
          # Delete ArgoCD application
          kubectl delete application nginx-vcluster-pr-$PR_NUMBER -n argocd --ignore-not-found=true
          
          # Remove cluster from ArgoCD
          argocd cluster rm "vcluster-pr-$PR_NUMBER" || true
          
          echo "=== ArgoCD cleanup completed ==="

      - name: Cleanup vCluster
        if: always()
        run: |
          echo "=== Cleaning up vCluster ==="
          
          # Kill port-forward processes
          kill $VCLUSTER_PID $ARGOCD_PORT_FORWARD_PID 2>/dev/null || true
          pkill -f "kubectl port-forward" || true
          pkill -f "vcluster connect" || true
          
          # Switch back to host context
          kubectl config use-context $HOST_CONTEXT || true
          
          # Disconnect vCluster
          vcluster disconnect || true
          
          # Delete vCluster and namespace
          vcluster delete testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER || true
          kubectl delete namespace demo-$PR_NUMBER --ignore-not-found=true
          
          echo "=== vCluster cleanup completed ==="

      - name: Final Status Check
        if: always()
        run: |
          echo "=== Final Status Check ==="
          
          # Switch to host context
          kubectl config use-context $HOST_CONTEXT || true
          
          echo "Remaining demo namespaces:"
          kubectl get namespaces | grep demo- || echo "✅ No demo namespaces remaining"
          
          echo "ArgoCD applications:"
          kubectl get applications -n argocd | grep nginx-vcluster-pr- || echo "✅ No ephemeral applications found"
          
          echo "=== GitOpsCon Demo Workflow completed successfully ==="
