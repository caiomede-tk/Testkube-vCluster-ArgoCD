name: Testkube on vCluster with ArgoCD
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main 

jobs:
  run-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
     
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install CLI tools
        run: |
          # Install vCluster CLI
          curl -sSL https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-linux-amd64 -o vcluster
          chmod +x vcluster
          sudo mv vcluster /usr/local/bin
          
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Verify existing installations
        run: |
          echo "=== Checking ArgoCD ==="
          kubectl get pods -n argocd
          
          echo "=== Checking Testkube ==="
          kubectl get pods -n testkube || echo "Testkube namespace not found"

      - name: Create vCluster
        run: |
          PR_NUMBER=${{ github.event.number || github.run_id }}
          echo "Running for PR #$PR_NUMBER"
          vcluster create testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER --connect=false
          
          # Wait for vCluster to be ready
          echo "Waiting for vCluster to be ready..."
          kubectl wait --for=condition=ready pod -l app=vcluster --timeout=300s -n demo-$PR_NUMBER

      - name: Connect to vCluster and deploy app via ArgoCD
        run: |
          PR_NUMBER=${{ github.event.number || github.run_id }}
          
          # Connect to vCluster and get kubeconfig
          vcluster connect testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER --print > vcluster-config
          
          # Verify vCluster connection
          echo "=== vCluster Status ==="
          kubectl --kubeconfig vcluster-config get nodes
          
          # Get ArgoCD admin password
          ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          echo "ArgoCD admin password: $ARGOCD_PASSWORD"
          
          # Check if ArgoCD server is exposed via LoadBalancer
          ARGOCD_SERVER=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          
          if [ -z "$ARGOCD_SERVER" ]; then
            echo "ArgoCD server not exposed, using port-forward"
            kubectl port-forward svc/argocd-server -n argocd 8080:443 &
            sleep 15
            ARGOCD_SERVER="localhost:8080"
          else
            echo "ArgoCD server available at: $ARGOCD_SERVER"
          fi
          
          # Login to ArgoCD
          argocd login $ARGOCD_SERVER --username admin --password $ARGOCD_PASSWORD --insecure
          
          # Add vCluster as destination cluster
          argocd cluster add vcluster_testkube-vcluster-$PR_NUMBER\_demo-$PR_NUMBER --name vcluster-pr-$PR_NUMBER --kubeconfig vcluster-config --yes
          
          # Create ArgoCD Application
          cat > argocd-app-pr-$PR_NUMBER.yaml << EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: nginx-app-pr-$PR_NUMBER
            namespace: argocd
          spec:
            project: default
            source:
              repoURL: ${{ github.server_url }}/${{ github.repository }}
              targetRevision: ${{ github.head_ref || github.ref_name }}
              path: .
            destination:
              name: vcluster-pr-$PR_NUMBER
              namespace: default
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
              - CreateNamespace=true
          EOF
          
          kubectl apply -f argocd-app-pr-$PR_NUMBER.yaml
          
          # Wait for application to sync
          echo "Waiting for ArgoCD to sync application..."
          argocd app wait nginx-app-pr-$PR_NUMBER --sync --health --timeout 300
          
          # Verify deployment in vCluster
          echo "=== Verifying deployment in vCluster ==="
          kubectl --kubeconfig vcluster-config get all
          kubectl --kubeconfig vcluster-config wait --for=condition=available --timeout=300s deployment/nginx-deployment

      - name: Setup Testkube
        uses: kubeshop/setup-testkube@v1
        with:
          organization: ${{ secrets.TESTKUBE_ORG_ID }}
          environment: ${{ secrets.TESTKUBE_ENV_ID }}
          token: ${{ secrets.TESTKUBE_API_TOKEN }}

      - name: Provision ephemeral runner and run test
        run: |
          # Provision ephemeral runner
          testkube install runner github-action-runner-${{ github.run_id }} --create --env ${{ secrets.TESTKUBE_ENV_ID }} --namespace testkube --floating
          
          # Run the test
          testkube run testworkflow curl-nginx-app \
           -f \
           --config url=http://nginx-service.default.svc.cluster.local \
           --target name=github-action-runner-${{ github.run_id }} \
           --tag pull-request=PR-${{ github.run_id }}

      - name: Cleanup resources
        if: always()
        run: |
          PR_NUMBER=${{ github.event.number || github.run_id }}
          
          # Delete ArgoCD application
          kubectl delete application nginx-app-pr-$PR_NUMBER -n argocd --ignore-not-found=true
          
          # Remove cluster from ArgoCD
          argocd cluster rm vcluster-pr-$PR_NUMBER --yes || true
          
          # Kill port-forward processes
          pkill -f "kubectl port-forward" || true
          
          # Delete Testkube runner
          testkube delete runner github-action-runner-${{ github.run_id }} --delete --uninstall || true
          
          # Disconnect and delete vCluster
          vcluster disconnect || true
          kubectl delete ns demo-$PR_NUMBER --ignore-not-found=true
