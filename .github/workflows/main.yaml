name: Testkube on vCluster with ArgoCD
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main 

env:
  PR_NUMBER: ${{ github.event.number || github.run_id }}

jobs:
  run-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
     
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install gke-gcloud-auth-plugin

      - name: Get GKE credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
            --zone ${{ secrets.GKE_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Install CLI tools
        run: |
          # Install vCluster CLI
          curl -sSL https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-linux-amd64 -o vcluster
          chmod +x vcluster
          sudo mv vcluster /usr/local/bin
          
          # Install ArgoCD CLI
          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd-linux-amd64
          sudo mv argocd-linux-amd64 /usr/local/bin/argocd

      - name: Verify existing installations
        run: |
          echo "=== Host Cluster Info ==="
          kubectl cluster-info
          kubectl get nodes
          
          echo "=== Available Namespaces ==="
          kubectl get namespaces
          
          echo "=== Checking ArgoCD ==="
          kubectl get pods -n argocd || echo "ArgoCD namespace not found"
          
          echo "=== Checking Testkube ==="
          kubectl get pods -n testkube || echo "Testkube namespace not found"

      - name: Install or Verify ArgoCD
        id: install-argocd
        run: |
          echo "=== Checking ArgoCD Installation ==="
          
          # Check if ArgoCD namespace exists and has running pods
          if kubectl get namespace argocd >/dev/null 2>&1; then
            echo "ArgoCD namespace exists, checking pods..."
            ARGOCD_PODS=$(kubectl get pods -n argocd --no-headers 2>/dev/null | wc -l)
            if [ "$ARGOCD_PODS" -gt 0 ]; then
              echo "ArgoCD pods found, checking if they're ready..."
              kubectl get pods -n argocd
              # Wait for existing ArgoCD to be ready
              kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd || echo "ArgoCD server not ready yet"
            else
              echo "ArgoCD namespace exists but no pods found, installing..."
              kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
              kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
            fi
          else
            echo "ArgoCD not found, installing..."
            kubectl create namespace argocd
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            kubectl wait --for=condition=available --timeout=600s deployment/argocd-server -n argocd
          fi
          
          echo "=== ArgoCD Status ==="
          kubectl get pods -n argocd
          kubectl get svc -n argocd

      # ==================== vCluster Module ====================
      - name: Create vCluster
        id: create-vcluster
        run: |
          echo "=== Creating vCluster for PR $PR_NUMBER ==="
          
          # Create namespace
          kubectl create namespace demo-$PR_NUMBER --dry-run=client -o yaml | kubectl apply -f -
          
          # Create vCluster (simple approach)
          vcluster create testkube-vcluster-$PR_NUMBER \
            --namespace demo-$PR_NUMBER \
            --connect=false
          
          # Wait for vCluster to be ready
          echo "Waiting for vCluster to be ready..."
          kubectl wait --for=condition=ready pod -l app=vcluster --timeout=300s -n demo-$PR_NUMBER
          
          echo "=== vCluster created successfully ==="
          kubectl get all -n demo-$PR_NUMBER

      - name: Setup vCluster connectivity
        id: setup-vcluster
        run: |
          echo "=== Setting up vCluster connectivity ==="
          
          # Save the current (host) context before connecting to vCluster
          HOST_CONTEXT=$(kubectl config current-context)
          echo "HOST_CONTEXT=$HOST_CONTEXT" >> $GITHUB_ENV
          echo "Host cluster context: $HOST_CONTEXT"
          
          # Create kubeconfig for ArgoCD to use (without switching context)
          vcluster connect testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER --print > vcluster-kubeconfig.yaml
          
          # Now connect to vCluster (this will switch the default context)
          vcluster connect testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER &
          VCLUSTER_PID=$!
          echo "VCLUSTER_PID=$VCLUSTER_PID" >> $GITHUB_ENV
          
          # Wait for connection to establish
          sleep 30
          
          echo "=== Verifying vCluster connection ==="
          kubectl get nodes
          kubectl get namespaces
          
          # Create default namespace if it doesn't exist in vCluster
          kubectl create namespace default --dry-run=client -o yaml | kubectl apply -f -
          
          echo "=== vCluster connectivity established ==="

      # ==================== ArgoCD GitOps Module ====================
      - name: Setup ArgoCD with vCluster Integration
        id: setup-argocd-vcluster-integration
        run: |
          echo "=== Setting up ArgoCD with vCluster Integration ==="
          
          # Switch to host context
          kubectl config use-context $HOST_CONTEXT
          
          # Get ArgoCD credentials
          ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          ARGOCD_SERVER=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "")
          
          if [ -z "$ARGOCD_SERVER" ]; then
            echo "Setting up ArgoCD port-forward..."
            kubectl port-forward svc/argocd-server -n argocd 8080:443 &
            ARGOCD_PORT_FORWARD_PID=$!
            echo "ARGOCD_PORT_FORWARD_PID=$ARGOCD_PORT_FORWARD_PID" >> $GITHUB_ENV
            sleep 15
            ARGOCD_SERVER="localhost:8080"
          fi
          
          echo "ARGOCD_SERVER=$ARGOCD_SERVER" >> $GITHUB_ENV
          echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> $GITHUB_ENV
          
          # Create ArgoCD application that deploys to staging first
          cat > argocd-app-pr-$PR_NUMBER.yaml << EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: nginx-app-pr-$PR_NUMBER
            namespace: argocd
            labels:
              vcluster.target: "demo-$PR_NUMBER"
          spec:
            project: default
            source:
              repoURL: ${{ github.server_url }}/${{ github.repository }}
              targetRevision: ${{ github.head_ref || github.ref_name }}
              path: k8s
            destination:
              server: https://kubernetes.default.svc
              namespace: nginx-staging-$PR_NUMBER
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
              - CreateNamespace=true
          EOF
          
          kubectl apply -f argocd-app-pr-$PR_NUMBER.yaml
          
          # Login to ArgoCD and sync
          argocd login "$ARGOCD_SERVER" --username admin --password "$ARGOCD_PASSWORD" --insecure
          
          echo "=== Syncing Application via ArgoCD ==="
          argocd app sync nginx-app-pr-$PR_NUMBER
          argocd app wait nginx-app-pr-$PR_NUMBER --health --timeout 300
          
          echo "=== ArgoCD Application Status ==="
          argocd app get nginx-app-pr-$PR_NUMBER

      - name: Promote to vCluster (GitOps Promotion)
        id: promote-to-vcluster
        run: |
          echo "=== Promoting to vCluster (GitOps Promotion) ==="
          
          # Switch to host context to get staged manifests
          kubectl config use-context $HOST_CONTEXT
          
          # Get manifests from staging
          kubectl get deployment nginx-deployment -n nginx-staging-$PR_NUMBER -o yaml > nginx-deployment-staged.yaml
          kubectl get service nginx-service -n nginx-staging-$PR_NUMBER -o yaml > nginx-service-staged.yaml
          
          # Clean manifests for vCluster deployment
          sed -i '/resourceVersion:/d; /uid:/d; /creationTimestamp:/d; /ownerReferences:/d; /selfLink:/d; /status:/,$d' nginx-deployment-staged.yaml nginx-service-staged.yaml
          sed -i 's/nginx-staging-'$PR_NUMBER'/default/g' nginx-deployment-staged.yaml nginx-service-staged.yaml
          
          # Deploy to vCluster
          VCLUSTER_CONTEXT_NAME=$(kubectl config get-contexts --kubeconfig=vcluster-kubeconfig.yaml --no-headers | awk '{print $2}' | head -1)
          kubectl config use-context "$VCLUSTER_CONTEXT_NAME"
          
          echo "Deploying to vCluster production environment..."
          kubectl apply -f nginx-deployment-staged.yaml
          kubectl apply -f nginx-service-staged.yaml
          
          kubectl wait --for=condition=available --timeout=300s deployment/nginx-deployment -n default
          
          echo "=== Deployment Status ==="
          kubectl get all -n default
          
          # Test the service
          kubectl run test-nginx --image=curlimages/curl:latest --rm -i --restart=Never -- \
            curl -s http://nginx-service.default.svc.cluster.local || echo "Service test completed"

      # ==================== Testkube Module ====================
      - name: Setup Testkube
        uses: kubeshop/setup-testkube@v1
        with:
          organization: ${{ secrets.TESTKUBE_ORG_ID }}
          environment: ${{ secrets.TESTKUBE_ENV_ID }}
          token: ${{ secrets.TESTKUBE_API_TOKEN }}

      - name: Provision ephemeral runner and run test
        id: run-tests
        run: |
          echo "=== Provisioning Testkube ephemeral runner ==="
          
          # Switch to host context for Testkube operations
          kubectl config use-context $HOST_CONTEXT
          
          # Provision ephemeral runner
          testkube install runner github-action-runner-${{ github.run_id }} \
            --create \
            --env ${{ secrets.TESTKUBE_ENV_ID }} \
            --namespace testkube \
            --floating
          
          echo "=== Running tests against vCluster deployment ==="
          
          # Run the test
          testkube run testworkflow curl-nginx-app \
           -f \
           --config url=http://nginx-service.default.svc.cluster.local \
           --target name=github-action-runner-${{ github.run_id }} \
           --tag pull-request=PR-${{ github.run_id }}
          
          echo "=== Tests completed ==="

      # ==================== Cleanup Module ====================
      - name: Cleanup ArgoCD Application
        if: always()
        run: |
          echo "=== Cleaning up ArgoCD Application ==="
          
          # Switch to host context for ArgoCD operations
          kubectl config use-context $HOST_CONTEXT || true
          
          # Login to ArgoCD
          argocd login "$ARGOCD_SERVER" --username admin --password "$ARGOCD_PASSWORD" --insecure || true
          
          # Delete ArgoCD application
          kubectl delete application nginx-app-pr-$PR_NUMBER -n argocd --ignore-not-found=true
          
          # Delete staging namespace
          kubectl delete namespace nginx-staging-$PR_NUMBER --ignore-not-found=true
          
          echo "=== ArgoCD cleanup completed ==="

      - name: Cleanup Testkube
        if: always()
        run: |
          echo "=== Cleaning up Testkube resources ==="
          
          # Switch to host context for Testkube operations
          kubectl config use-context $HOST_CONTEXT || true
          
          # Delete Testkube runner
          testkube delete runner github-action-runner-${{ github.run_id }} --delete --uninstall || true
          
          echo "=== Testkube cleanup completed ==="

      - name: Cleanup vCluster
        if: always()
        run: |
          echo "=== Cleaning up vCluster ==="
          
          # Kill port-forward processes
          kill $VCLUSTER_PID $ARGOCD_PORT_FORWARD_PID 2>/dev/null || true
          pkill -f "kubectl port-forward" || true
          pkill -f "vcluster connect" || true
          
          # Switch back to host context
          kubectl config use-context $HOST_CONTEXT || true
          
          # Disconnect vCluster
          vcluster disconnect || true
          
          # Delete vCluster and namespace
          vcluster delete testkube-vcluster-$PR_NUMBER --namespace demo-$PR_NUMBER || true
          kubectl delete namespace demo-$PR_NUMBER --ignore-not-found=true
          
          echo "=== vCluster cleanup completed ==="

      - name: Final Status Check
        if: always()
        run: |
          echo "=== Final Status Check ==="
          
          # Switch to host context
          kubectl config use-context $HOST_CONTEXT || true
          
          echo "Remaining demo namespaces:"
          kubectl get namespaces | grep demo- || echo "No demo namespaces remaining"
          
          echo "ArgoCD applications:"
          kubectl get applications -n argocd || echo "No applications found"
          
          echo "=== Workflow completed ==="
